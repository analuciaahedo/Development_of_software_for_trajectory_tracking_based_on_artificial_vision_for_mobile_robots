import math 
import numpy as np 
import rclpy 
from rclpy import qos
from rclpy.node import Node
from std_msgs.msg import Float32

class My_Subscriber(Node):
   def __init__(self):
       super().__init__('odometry_node')
      #Mensajes que se publicaran 
       self.msg1 = Float32()
       self.msg2 = Float32()
       self.msg3 = Float32()

           #Subscripciones a cada llanta 
       self.sub_VelocityEncL = self.create_subscription(Float32, 'VelocityEncL', self.VelocityEncL_callback, qos.qos_profile_sensor_data)
       self.sub_VelocityEncR = self.create_subscription(Float32, 'VelocityEncR', self.VelocityEncR_callback, qos.qos_profile_sensor_data)
           #Publicar nuestros valores
       self.publisher_x = self.create_publisher(Float32, 'odometria_x', qos.qos_profile_sensor_data)
       self.publisher_y = self.create_publisher(Float32, 'odometria_y', qos.qos_profile_sensor_data)
       self.publisher_theta = self.create_publisher(Float32, 'odometria_a', qos.qos_profile_sensor_data)

       self.vel_angL = 0.0
       self.vel_angR = 0.0
       self.vel_lineal = 0.0
       self.vel_ang = 0.0
       self.r = 0.05
       self.l = 0.18
       self.theta = 0.0
       self.vel_x = 0.0
       self.vel_y = 0.0
       self.x = 0.0
       self.y = 0.0



           #Timers
       self.timer_period = 0.1
       self.timer = self.create_timer(self.timer_period, self.timer_callback)

   def VelocityEncL_callback(self, msg):
      self.vel_angL = msg.data
  
   def VelocityEncR_callback(self, msg):
      self.vel_angR = msg.data


   def timer_callback(self):
      #Vel Lineal
      self.vel_lineal = self.r*((self.vel_angL+self.vel_angR)/2.0)
      #Vel Angular
      self.vel_ang = self.r*((self.vel_angR-self.vel_angL)/self.l)
      #Angulo 
      self.theta = self.vel_ang*self.timer_period + self.theta
      #Velocidades en X y Y
      self.vel_x = self.vel_lineal * (np.cos(self.theta))
      self.vel_y = self.vel_lineal * (np.sin(self.theta))
      #Valores en X y Y 
      self.x = self.vel_x*self.timer_period + self.x
      self.y = self.vel_y*self.timer_period + self.y
      
      #Publicar los mensajes
      self.msg1.data = self.x
      self.msg2.data = self.y
      self.msg3.data = self.theta 
      self.publisher_x.publish(self.msg1)
      self.publisher_y.publish(self.msg2)
      self.publisher_theta.publish(self.msg3)

      self.get_logger().info(f'Pos en X: {self.x:.2f} Pos en Y: {self.y:.2f} Angulo: {self.theta:.2f}')
      #self.get_logger().info(f' {}')
      # self.get_logger().info(f'')
def main(args=None):
   rclpy.init(args=args)
   process = My_Subscriber()
   rclpy.spin(process)
   process.destroy_node()
   rclpy.shutdown()

if __name__ == '__main__':
   main()
